import groovy.json.JsonOutput

buildscript {
    dependencies {
        classpath "org.apache.groovy:groovy-json:4.0.6"
    }
}

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.0-SNAPSHOT" apply false

    id "me.shedaniel.unified-publishing" version "0.1.+"
}

architectury {
    minecraft = rootProject.minecraft_version
}

tasks.register("generateDiscordEmbed") {
    doFirst {
        var env = System.getenv()
        var changelogFile = rootProject.file("changelog.txt")

        var fields = []

        if (changelogFile.exists()) {
            fields.add([
                    name : "Changelog",
                    value: changelogFile.text
            ])
        }

        fields.addAll([
                [
                        name  : "Minecraft Version",
                        value : minecraft_version,
                        inline: true
                ],
                [
                        name  : "Mod Version",
                        value : mod_version,
                        inline: true
                ],
                [
                        name  : "Download",
                        value : "<:modrinth:978684543034871878> [Modrinth](" +
                                env.MODRINTH_PROJECT_URL +
                                ")\n<:curseforge:978684543026462790> [Curseforge](" +
                                env.CURSE_PROJECT_URL + ")",
                        inline: true
                ]
        ])

        var json = JsonOutput.toJson([
                embeds: [
                        title    : archives_base_name,
                        color    : Integer.parseInt(env.EMBED_COLOR, 16),
                        fields   : fields,
                        thumbnail: [url: env.WEBHOOK_THUMBNAIL]
                ],
                username: env.WEBHOOK_USERNAME,
                avatar_url: env.WEBHOOK_AVATAR
        ])

        file(projectDir, "embed.json").write(json)
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "me.shedaniel.unified-publishing"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }

    if (name in platforms) {
        var modLoader = name

        unifiedPublishing {
            project {
                var env = System.getenv()
                var curseToken = env.CURSE_TOKEN
                var modrinthToken = env.MODRINTH_TOKEN
                var changelogFile = rootProject.file("changelog.txt")

                gameVersions = [minecraft_version]
                gameLoaders = [modLoader]

                mainPublication(tasks.remapJar)

                if (changelogFile.exists()) {
                    changelog = changelogFile.text
                }

                if (curseToken != null) {
                    curseforge {
                        token = curseToken
                        id = env.CURSE_PROJECT
                    }
                }

                if (modrinthToken != null) {
                    modrinth {
                        token = modrinthToken
                        id = env.MODRINTH_PROJECT
                    }
                }
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.

        maven { url = "https://nexus.resourcefulbees.com/repository/maven-public/" }
        maven { url "https://maven.terraformersmc.com" }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}
