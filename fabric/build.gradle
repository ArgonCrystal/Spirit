plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

def ENV = System.getenv()

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath.set(project(":fabric").file("src/main/resources/${archives_base_name}.accesswidener"))
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"
    include modApi("com.teamresourceful.resourcefullib:resourcefullib-fabric-$rootProject.resourcefullib_version")
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modApi("com.terraformersmc:modmenu:${modmenu_version}")
    modLocalRuntime "dev.architectury:architectury-fabric:6.2.43"
    modLocalRuntime modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    //modCompileOnly("mezz.jei:jei-${minecraft_version}-fabric:$jei_version") {exclude group: "mezz.jei"}
    //modRuntimeOnly("mezz.jei:jei-${project.jei_minecraft_release}-fabric:${project.jei_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(sourceSets.main.resources.srcDirs) {
        include('**/data/spirit/recipes/**')
        expand "dependent": "c"
    }
}


shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
    archivesBaseName = "$archives_base_name-fabric-$minecraft_version"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

repositories {
    //maven { url = "https://nexus.resourcefulbees.com/repository/maven-public/"}
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifact remapJar
            artifactId = rootProject.archives_base_name + "-" + project.name + "-" + project.minecraft_version
            pom {
                name = 'Spirit'
                description = 'A magic mod revolving around souls originally inspired by Soul Shards'
                url = 'https://github.com/terrarium-earth/Spirit'

                scm {
                    connection = 'git:https://github.com/terrarium-earth/Spirit.git'
                    developerConnection = 'git:https://github.com/terrarium-earth/Spirit.git'
                    url = 'https://github.com/terrarium-earth/Spirit'
                }

                licenses {
                    license {
                        name = 'ARR'
                    }
                }
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            url = "https://maven.resourcefulbees.com/repository/codexadrian/"
            credentials {
                username ENV.MAVEN_USERNAME
                password ENV.MAVEN_PASSWORD
            }
        }
    }
}

unifiedPublishing {
    project {
        relations {
            depends {
                curseforge = "fabric-api"
                modrinth = "fabric-api"
            }
        }
    }
}
